
buildscript {
	ext.repos = {
		maven{
			url uri("${projectDir}/../axelor-mvn-repo")
		}
		// 最优先检查本地 Maven 仓库
		mavenLocal()

		// 公共仓库优先使用阿里云的
		maven { url 'https://maven.aliyun.com/repository/central' }
		maven { url 'https://maven.aliyun.com/repository/jcenter'}
		maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }


		// 使用 Axelor 官方的 Repo 放在下面，以便补充缺少的 JAR
		maven { url 'https://repository.axelor.com/nexus/public/' }

		// 原始的 Maven 仓库放在最后，可以不用，因为阿里云的仓库是镜像同步的

		mavenCentral()
		jcenter()
		maven { url 'https://plugins.gradle.org/m2/'}
	}
	ext.openPlatformVersion = '5.3.8'
	ext.appVersion = '6.0.9'
	repositories repos
//	dependencies {
//		classpath "com.axelor:axelor-gradle:${openPlatformVersion}"
//	}
	dependencies{
        classpath 'com.axelor:axelor-gradle:5.4.0-SNAPSHOT'
    }
}

allprojects { repositories repos }

apply plugin: 'idea'
//apply plugin: 'eclipse'
apply plugin: "com.axelor.app"

apply from: './gradle/style.gradle'

allprojects {

	configurations {
   		runtimeClasspath.exclude group:"org.eclipse.birt.runtime.3_7_1", module:"org.apache.commons.codec"
	}

	apply plugin: 'idea'
//	apply plugin: 'eclipse'

	group = "com.axelor"
	version = "${appVersion}"

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

}

subprojects {
  group = "com.axelor.apps"
}

axelor {
	title "Axelor ERP"
	description "Axelor Entreprise Application"
}

dependencies {
	gradle.appModules.each { dir ->
		implementation project(":modules:$dir.name")
	}
}

task("dataImport", type: JavaExec) {
	main = "com.axelor.apps.erp.Main"
	classpath = sourceSets.main.runtimeClasspath
	if(System.getProperty("exec.args") != null) {
		args System.getProperty("exec.args").split()
	}
}

task archiveReports(type: Zip) {
	file("modules").traverse(type: groovy.io.FileType.DIRECTORIES, maxDepth: 1) { dir ->
		if(new File(dir, "build.gradle").exists() && new File(dir, "/src/main/resources/reports").exists()) {
			new File(dir, "/src/main/resources/reports/").listFiles().each { report ->
				from report.getPath()
			}
		}
	}

	classifier 'reports'
	includeEmptyDirs = false
	destinationDirectory = file("$buildDir/libs")
}


//task generateChangeLog(type: GenerateAosChangelog) {
//  group "Axelor application"
//  description "Generate change logs from unreleased entries."
//  files = fileTree(projectDir) {
//    include '**/changelogs/**/*.yml'
//    include '**/changelogs/**/*.yaml'
//  }
//}

build.finalizedBy archiveReports
